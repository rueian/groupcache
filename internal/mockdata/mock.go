// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rueian/groupcache/pkg/data (interfaces: Value,Store,Loader)

// Package mockdata is a generated GoMock package.
package mockdata

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	data "github.com/rueian/groupcache/pkg/data"
	reflect "reflect"
)

// MockValue is a mock of Value interface
type MockValue struct {
	ctrl     *gomock.Controller
	recorder *MockValueMockRecorder
}

// MockValueMockRecorder is the mock recorder for MockValue
type MockValueMockRecorder struct {
	mock *MockValue
}

// NewMockValue creates a new mock instance
func NewMockValue(ctrl *gomock.Controller) *MockValue {
	mock := &MockValue{ctrl: ctrl}
	mock.recorder = &MockValueMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockValue) EXPECT() *MockValueMockRecorder {
	return m.recorder
}

// Acceptable mocks base method
func (m *MockValue) Acceptable() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Acceptable")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Acceptable indicates an expected call of Acceptable
func (mr *MockValueMockRecorder) Acceptable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Acceptable", reflect.TypeOf((*MockValue)(nil).Acceptable))
}

// Questionable mocks base method
func (m *MockValue) Questionable() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Questionable")
}

// Questionable indicates an expected call of Questionable
func (mr *MockValueMockRecorder) Questionable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Questionable", reflect.TypeOf((*MockValue)(nil).Questionable))
}

// Val mocks base method
func (m *MockValue) Val() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Val")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Val indicates an expected call of Val
func (mr *MockValueMockRecorder) Val() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Val", reflect.TypeOf((*MockValue)(nil).Val))
}

// MockStore is a mock of Store interface
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// Add mocks base method
func (m *MockStore) Add(arg0 string, arg1 data.Value) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Add", arg0, arg1)
}

// Add indicates an expected call of Add
func (mr *MockStoreMockRecorder) Add(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockStore)(nil).Add), arg0, arg1)
}

// Bytes mocks base method
func (m *MockStore) Bytes() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bytes")
	ret0, _ := ret[0].(int64)
	return ret0
}

// Bytes indicates an expected call of Bytes
func (mr *MockStoreMockRecorder) Bytes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bytes", reflect.TypeOf((*MockStore)(nil).Bytes))
}

// Get mocks base method
func (m *MockStore) Get(arg0 string) data.Value {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(data.Value)
	return ret0
}

// Get indicates an expected call of Get
func (mr *MockStoreMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStore)(nil).Get), arg0)
}

// RemoveOne mocks base method
func (m *MockStore) RemoveOne() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveOne")
}

// RemoveOne indicates an expected call of RemoveOne
func (mr *MockStoreMockRecorder) RemoveOne() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveOne", reflect.TypeOf((*MockStore)(nil).RemoveOne))
}

// MockLoader is a mock of Loader interface
type MockLoader struct {
	ctrl     *gomock.Controller
	recorder *MockLoaderMockRecorder
}

// MockLoaderMockRecorder is the mock recorder for MockLoader
type MockLoaderMockRecorder struct {
	mock *MockLoader
}

// NewMockLoader creates a new mock instance
func NewMockLoader(ctrl *gomock.Controller) *MockLoader {
	mock := &MockLoader{ctrl: ctrl}
	mock.recorder = &MockLoaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLoader) EXPECT() *MockLoaderMockRecorder {
	return m.recorder
}

// Load mocks base method
func (m *MockLoader) Load(arg0 context.Context, arg1 string) (data.Value, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", arg0, arg1)
	ret0, _ := ret[0].(data.Value)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Load indicates an expected call of Load
func (mr *MockLoaderMockRecorder) Load(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockLoader)(nil).Load), arg0, arg1)
}
