// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rueian/groupcache/pkg/peer (interfaces: Peer,Picker)

// Package mockpeer is a generated GoMock package.
package mockpeer

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	data "github.com/rueian/groupcache/pkg/data"
	peer "github.com/rueian/groupcache/pkg/peer"
	reflect "reflect"
)

// MockPeer is a mock of Peer interface
type MockPeer struct {
	ctrl     *gomock.Controller
	recorder *MockPeerMockRecorder
}

// MockPeerMockRecorder is the mock recorder for MockPeer
type MockPeerMockRecorder struct {
	mock *MockPeer
}

// NewMockPeer creates a new mock instance
func NewMockPeer(ctrl *gomock.Controller) *MockPeer {
	mock := &MockPeer{ctrl: ctrl}
	mock.recorder = &MockPeerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPeer) EXPECT() *MockPeerMockRecorder {
	return m.recorder
}

// Lookup mocks base method
func (m *MockPeer) Lookup(arg0 context.Context, arg1 string) (data.Value, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lookup", arg0, arg1)
	ret0, _ := ret[0].(data.Value)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Lookup indicates an expected call of Lookup
func (mr *MockPeerMockRecorder) Lookup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lookup", reflect.TypeOf((*MockPeer)(nil).Lookup), arg0, arg1)
}

// LookupOrLoad mocks base method
func (m *MockPeer) LookupOrLoad(arg0 context.Context, arg1 string) (data.Value, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupOrLoad", arg0, arg1)
	ret0, _ := ret[0].(data.Value)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupOrLoad indicates an expected call of LookupOrLoad
func (mr *MockPeerMockRecorder) LookupOrLoad(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupOrLoad", reflect.TypeOf((*MockPeer)(nil).LookupOrLoad), arg0, arg1)
}

// Push mocks base method
func (m *MockPeer) Push(arg0 context.Context, arg1 string, arg2 data.Value) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Push", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Push indicates an expected call of Push
func (mr *MockPeerMockRecorder) Push(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Push", reflect.TypeOf((*MockPeer)(nil).Push), arg0, arg1, arg2)
}

// Self mocks base method
func (m *MockPeer) Self() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Self")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Self indicates an expected call of Self
func (mr *MockPeerMockRecorder) Self() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Self", reflect.TypeOf((*MockPeer)(nil).Self))
}

// WarmingUp mocks base method
func (m *MockPeer) WarmingUp() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WarmingUp")
	ret0, _ := ret[0].(bool)
	return ret0
}

// WarmingUp indicates an expected call of WarmingUp
func (mr *MockPeerMockRecorder) WarmingUp() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WarmingUp", reflect.TypeOf((*MockPeer)(nil).WarmingUp))
}

// MockPicker is a mock of Picker interface
type MockPicker struct {
	ctrl     *gomock.Controller
	recorder *MockPickerMockRecorder
}

// MockPickerMockRecorder is the mock recorder for MockPicker
type MockPickerMockRecorder struct {
	mock *MockPicker
}

// NewMockPicker creates a new mock instance
func NewMockPicker(ctrl *gomock.Controller) *MockPicker {
	mock := &MockPicker{ctrl: ctrl}
	mock.recorder = &MockPickerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPicker) EXPECT() *MockPickerMockRecorder {
	return m.recorder
}

// Pick mocks base method
func (m *MockPicker) Pick(arg0 string, arg1 int) []peer.Peer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pick", arg0, arg1)
	ret0, _ := ret[0].([]peer.Peer)
	return ret0
}

// Pick indicates an expected call of Pick
func (mr *MockPickerMockRecorder) Pick(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pick", reflect.TypeOf((*MockPicker)(nil).Pick), arg0, arg1)
}
